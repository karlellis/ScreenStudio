/*
 * Copyright (C) 2014 Patrick Balleux
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package screenstudio.sources;

import java.awt.AWTException;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import screenstudio.encoder.FFMpeg;

/**
 *
 * @author patrick
 */
public class WebcamViewer extends javax.swing.JPanel implements Runnable {

    private final File mDevice;
    private final int mWidth;
    private final int mHeight;
    private Image buffer;
    private String mTitle;
    private final int mFPS;
    private boolean stopMe = false;

    /**
     * Creates new form WebcamViewer
     *
     * @param device
     * @param width
     * @param height
     * @param title
     * @param fps
     */
    public WebcamViewer(File device, int width, int height, String title, int fps) {
        initComponents();
        mDevice = device;
        mWidth = width;
        mHeight = height;
        mTitle = title;
        mFPS = fps;
        this.setSize(width, height);
        buffer = new BufferedImage(width, height, BufferedImage.TYPE_3BYTE_BGR);
        this.setDoubleBuffered(false);
    }

    public void stop() {
        stopMe = true;
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawImage(buffer, 0, 0, this);
        //mTitle = new Date().toString();
        if (mTitle.trim().length() > 0) {
            g.setFont(this.getFont());
            int strW = (int) g.getFontMetrics().getStringBounds(mTitle, g).getWidth();
            int strH = (int) g.getFontMetrics().getStringBounds(mTitle, g).getHeight();
            g.setColor(Color.WHITE);
            g.setXORMode(Color.BLACK);
            //g.fillRect((getWidth() / 2) - (strW / 2) - 3, 0, strW + 6, strH + 3);
            g.fillRect(0, 0, getWidth(), strH + 3);
            g.setColor(Color.WHITE);
            g.setPaintMode();
            g.drawString(mTitle, (getWidth() / 2) - (strW / 2), strH);

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setFont(new java.awt.Font("DejaVu Sans", 1, 10)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void run() {

        String webcamFormat = "video4linux2";
        String displayFormat = "x11grab";
        String bin = "ffmpeg";
        File folder = new File("FFMPEG");
        if (folder.exists()) {
            File file;
            if (Screen.isOSX()) {
                file = new File(folder, "osx.properties");
            } else {
                file = new File(folder, "default.properties");
            }

            if (file.exists()) {
                try {
                    Properties p = new Properties();
                    try (InputStream in = file.toURI().toURL().openStream()) {
                        p.load(in);
                    }
                    webcamFormat = p.getProperty("WEBCAMFORMAT", webcamFormat);
                    displayFormat = p.getProperty("DESKTOPFORMAT", displayFormat);
                    bin = p.getProperty("BIN", bin);
                } catch (MalformedURLException ex) {
                    Logger.getLogger(FFMpeg.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(FFMpeg.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }

        try {
            stopMe = false;
            String command;
            BufferedImage img;

            if (mDevice.getName().equals("MOUSE")) {
                if (Screen.isOSX()) {
                    command = bin + " -nostats -loglevel 0 -f " + displayFormat + " -follow_mouse centered -video_size " + mWidth / 2 + "x" + mHeight / 2 + " -i " + "0: -s " + mWidth + "x" + mHeight + " -r " + mFPS + "  -f rawvideo -pix_fmt bgr24 -";
                } else {
                    command = bin + " -nostats -loglevel 0 -f " + displayFormat + " -follow_mouse centered -video_size " + mWidth / 2 + "x" + mHeight / 2 + " -i " + ":0.0 -s " + mWidth + "x" + mHeight + " -r " + mFPS + " -f rawvideo -pix_fmt bgr24 -";
                }
            } else {
                command = bin + " -nostats -loglevel 0 -f " + webcamFormat + " -i " + mDevice.toString() + " -s " + mWidth + "x" + mHeight + " -r " + mFPS + " -f rawvideo -pix_fmt bgr24 -";
            }
            Process p = Runtime.getRuntime().exec(command);
            java.io.DataInputStream in = new java.io.DataInputStream(p.getInputStream());
            while (!stopMe) {
                img = new BufferedImage(mWidth, mHeight, BufferedImage.TYPE_3BYTE_BGR);
                in.readFully(((DataBufferByte) img.getRaster().getDataBuffer()).getData());
                buffer = img;
            }
            in.close();
            p.destroy();
        } catch (IOException ex) {
            Logger.getLogger(WebcamViewer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
